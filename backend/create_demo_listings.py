#!/usr/bin/env python3
"""
Script pour cr√©er des annonces de d√©monstration
"""

import os
import sys
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from listings.models import Category, Listing
from django.contrib.auth import get_user_model

User = get_user_model()

def create_demo_listings():
    """Cr√©er des annonces de d√©monstration"""
    print("üé® Cr√©ation d'annonces de d√©monstration")
    print("=" * 50)
    
    # R√©cup√©rer l'utilisateur de test
    try:
        user = User.objects.get(username='testuser')
        print(f"‚úÖ Utilisateur trouv√©: {user.username}")
    except User.DoesNotExist:
        print("‚ùå Utilisateur 'testuser' non trouv√©")
        print("üí° Ex√©cutez d'abord: python quick_test.py")
        return
    
    # R√©cup√©rer les cat√©gories
    categories = Category.objects.all()
    if not categories.exists():
        print("‚ùå Aucune cat√©gorie trouv√©e")
        print("üí° Ex√©cutez d'abord: python create_categories.py")
        return
    
    print(f"‚úÖ {categories.count()} cat√©gories trouv√©es")
    
    # Donn√©es des annonces de d√©monstration
    demo_listings = [
        {
            'title': 'Robe traditionnelle s√©n√©galaise en wax',
            'description': 'Magnifique robe traditionnelle en wax authentique, parfait √©tat, taille M. Id√©ale pour les c√©r√©monies et √©v√©nements sp√©ciaux.',
            'price': 25000,
            'category': 'Femmes'
        },
        {
            'title': 'Sneakers Nike Air Max 270',
            'description': 'Sneakers Nike Air Max 270 en excellent √©tat, pointure 42. Tr√®s confortables pour le sport ou la ville.',
            'price': 35000,
            'category': 'Hommes'
        },
        {
            'title': 'Sac √† main cuir v√©ritable',
            'description': 'Sac √† main en cuir v√©ritable de qualit√©, marron, avec plusieurs compartiments. Parfait pour le travail.',
            'price': 45000,
            'category': 'Femmes'
        },
        {
            'title': 'Smartphone Samsung Galaxy A52',
            'description': 'Smartphone Samsung Galaxy A52, 128GB, bleu, en tr√®s bon √©tat. Livr√© avec chargeur et coque de protection.',
            'price': 120000,
            'category': '√âlectronique'
        },
        {
            'title': 'Livre "Le Petit Prince" en fran√ßais',
            'description': '√âdition collector du Petit Prince d\'Antoine de Saint-Exup√©ry, en parfait √©tat. Id√©al pour collectionneurs.',
            'price': 5000,
            'category': 'Livres'
        },
        {
            'title': 'Ballon de football Adidas',
            'description': 'Ballon de football officiel Adidas, taille 5, utilis√© seulement quelques fois. Parfait pour l\'entra√Ænement.',
            'price': 15000,
            'category': 'Sport'
        },
        {
            'title': 'Vase d√©coratif en c√©ramique',
            'description': 'Vase d√©coratif en c√©ramique artisanale, motif traditionnel africain. Parfait pour d√©corer votre salon.',
            'price': 18000,
            'category': 'Maison'
        },
        {
            'title': 'Jeu de soci√©t√© Monopoly',
            'description': 'Jeu de soci√©t√© Monopoly complet, toutes les pi√®ces pr√©sentes. Parfait pour les soir√©es en famille.',
            'price': 8000,
            'category': 'Loisirs'
        }
    ]
    
    created_count = 0
    for listing_data in demo_listings:
        try:
            # Trouver la cat√©gorie
            category = Category.objects.get(name=listing_data['category'])
            
            # Cr√©er l'annonce
            listing, created = Listing.objects.get_or_create(
                title=listing_data['title'],
                defaults={
                    'description': listing_data['description'],
                    'price': listing_data['price'],
                    'category': category,
                    'seller': user
                }
            )
            
            if created:
                print(f"‚úÖ Annonce cr√©√©e: {listing.title}")
                created_count += 1
            else:
                print(f"‚ÑπÔ∏è Annonce existante: {listing.title}")
                
        except Category.DoesNotExist:
            print(f"‚ùå Cat√©gorie '{listing_data['category']}' non trouv√©e")
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation: {e}")
    
    # Statistiques finales
    print(f"\nüìä R√©sum√©:")
    print(f"   - {created_count} nouvelles annonces cr√©√©es")
    print(f"   - {Listing.objects.count()} annonces totales")
    
    # Lister toutes les annonces
    print(f"\nüìã Toutes les annonces:")
    for listing in Listing.objects.all().order_by('-created_at'):
        print(f"   - {listing.title} ({listing.category.name}) - {listing.price} FCFA")
    
    print(f"\nüéâ Annonces de d√©monstration cr√©√©es avec succ√®s!")
    print(f"üí° Vous pouvez maintenant voir ces annonces sur la page d'accueil")

if __name__ == '__main__':
    create_demo_listings() 