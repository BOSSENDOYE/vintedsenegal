#!/usr/bin/env python3
"""
Script de diagnostic pour identifier les probl√®mes
"""

import os
import sys
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from django.test import Client
from django.contrib.auth import get_user_model
from listings.models import Category, Listing
import json

User = get_user_model()

def check_database():
    """V√©rifier la base de donn√©es"""
    print("üîç Diagnostic de la base de donn√©es")
    print("=" * 50)
    
    # V√©rifier les utilisateurs
    users = User.objects.all()
    print(f"üë• Utilisateurs: {users.count()}")
    for user in users:
        print(f"   - {user.username} (ID: {user.id})")
    
    # V√©rifier les cat√©gories
    categories = Category.objects.all()
    print(f"\nüè∑Ô∏è Cat√©gories: {categories.count()}")
    for cat in categories:
        print(f"   - {cat.name} (ID: {cat.id})")
    
    # V√©rifier les annonces
    listings = Listing.objects.all()
    print(f"\nüìã Annonces: {listings.count()}")
    for listing in listings:
        print(f"   - {listing.title} (ID: {listing.id}, Vendeur: {listing.seller.username if listing.seller else 'Aucun'})")

def test_api_endpoints():
    """Tester les endpoints API"""
    print("\nüåê Test des endpoints API")
    print("=" * 50)
    
    client = Client()
    
    # Test de l'endpoint de connexion
    print("\n1Ô∏è‚É£ Test de connexion...")
    login_data = {
        'username': 'testuser',
        'password': 'testpass123'
    }
    
    response = client.post('/api/users/login/', 
                          data=json.dumps(login_data),
                          content_type='application/json')
    
    print(f"   Status: {response.status_code}")
    if response.status_code == 200:
        data = json.loads(response.content)
        print(f"   ‚úÖ Connexion r√©ussie")
        access_token = data.get('access')
        
        # Test de cr√©ation d'annonce
        print("\n2Ô∏è‚É£ Test de cr√©ation d'annonce...")
        listing_data = {
            'title': 'Test Diagnostic',
            'description': 'Test de diagnostic',
            'price': '10000',
            'category': 'Femmes'
        }
        
        headers = {
            'HTTP_AUTHORIZATION': f'Bearer {access_token}',
            'content_type': 'application/json'
        }
        
        create_response = client.post('/api/listings/create/',
                                     data=json.dumps(listing_data),
                                     **headers)
        
        print(f"   Status: {create_response.status_code}")
        print(f"   Response: {create_response.content.decode()}")
        
        if create_response.status_code == 201:
            print("   ‚úÖ Cr√©ation r√©ussie")
        else:
            print("   ‚ùå √âchec de cr√©ation")
    else:
        print(f"   ‚ùå √âchec de connexion: {response.content.decode()}")
    
    # Test de r√©cup√©ration des annonces
    print("\n3Ô∏è‚É£ Test de r√©cup√©ration des annonces...")
    list_response = client.get('/api/listings/')
    print(f"   Status: {list_response.status_code}")
    if list_response.status_code == 200:
        data = json.loads(list_response.content)
        print(f"   ‚úÖ {len(data)} annonces trouv√©es")
    else:
        print(f"   ‚ùå √âchec: {list_response.content.decode()}")

def check_settings():
    """V√©rifier les param√®tres"""
    print("\n‚öôÔ∏è V√©rification des param√®tres")
    print("=" * 50)
    
    print(f"DEBUG: {settings.DEBUG}")
    print(f"CORS_ALLOW_ALL_ORIGINS: {getattr(settings, 'CORS_ALLOW_ALL_ORIGINS', 'Non d√©fini')}")
    print(f"ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
    print(f"INSTALLED_APPS: {len(settings.INSTALLED_APPS)} apps")
    
    # V√©rifier les middlewares
    print(f"\nMiddlewares:")
    for middleware in settings.MIDDLEWARE:
        print(f"   - {middleware}")

def create_test_data():
    """Cr√©er des donn√©es de test"""
    print("\nüîß Cr√©ation de donn√©es de test")
    print("=" * 50)
    
    # Cr√©er un utilisateur de test
    user, created = User.objects.get_or_create(
        username='testuser',
        defaults={'email': 'test@example.com'}
    )
    if created:
        user.set_password('testpass123')
        user.save()
        print("‚úÖ Utilisateur de test cr√©√©")
    else:
        print("‚ÑπÔ∏è Utilisateur de test existant")
    
    # Cr√©er une cat√©gorie de test
    category, created = Category.objects.get_or_create(name='Femmes')
    if created:
        print("‚úÖ Cat√©gorie 'Femmes' cr√©√©e")
    else:
        print("‚ÑπÔ∏è Cat√©gorie 'Femmes' existante")

if __name__ == '__main__':
    create_test_data()
    check_database()
    check_settings()
    test_api_endpoints()
    
    print("\nüéØ R√©sum√© du diagnostic:")
    print("=" * 50)
    print("1. V√©rifiez que l'utilisateur 'testuser' existe")
    print("2. V√©rifiez que la cat√©gorie 'Femmes' existe")
    print("3. V√©rifiez que le serveur Django fonctionne sur le port 8000")
    print("4. V√©rifiez que le frontend fonctionne sur le port 3000")
    print("5. V√©rifiez les logs du serveur Django pour les erreurs d√©taill√©es") 