#!/usr/bin/env python3
"""
Script pour tester les images et cr√©er des annonces avec des images de d√©monstration
"""

import os
import sys
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from listings.models import Category, Listing, Photo
from django.contrib.auth import get_user_model
from django.core.files.base import ContentFile
import requests
from io import BytesIO

User = get_user_model()

def download_image(url, filename):
    """T√©l√©charger une image depuis une URL"""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return ContentFile(response.content, name=filename)
    except Exception as e:
        print(f"‚ùå Erreur lors du t√©l√©chargement de {url}: {e}")
        return None

def create_listings_with_images():
    """Cr√©er des annonces avec des images de d√©monstration"""
    print("üñºÔ∏è Cr√©ation d'annonces avec images")
    print("=" * 50)
    
    # R√©cup√©rer l'utilisateur de test
    try:
        user = User.objects.get(username='testuser')
        print(f"‚úÖ Utilisateur trouv√©: {user.username}")
    except User.DoesNotExist:
        print("‚ùå Utilisateur 'testuser' non trouv√©")
        print("üí° Ex√©cutez d'abord: python quick_test.py")
        return
    
    # R√©cup√©rer les cat√©gories
    categories = Category.objects.all()
    if not categories.exists():
        print("‚ùå Aucune cat√©gorie trouv√©e")
        print("üí° Ex√©cutez d'abord: python create_categories.py")
        return
    
    print(f"‚úÖ {categories.count()} cat√©gories trouv√©es")
    
    # Donn√©es des annonces avec images
    demo_listings = [
        {
            'title': 'Robe traditionnelle s√©n√©galaise en wax',
            'description': 'Magnifique robe traditionnelle en wax authentique, parfait √©tat, taille M. Id√©ale pour les c√©r√©monies et √©v√©nements sp√©ciaux. Couleurs vives et motifs traditionnels.',
            'price': 25000,
            'category': 'Femmes',
            'images': [
                'https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?w=400&h=300&fit=crop',
                'https://images.unsplash.com/photo-1594633312681-425c7b97ccd1?w=400&h=300&fit=crop'
            ]
        },
        {
            'title': 'Sneakers Nike Air Max 270',
            'description': 'Sneakers Nike Air Max 270 en excellent √©tat, pointure 42. Tr√®s confortables pour le sport ou la ville. Couleur blanche avec d√©tails noirs.',
            'price': 35000,
            'category': 'Hommes',
            'images': [
                'https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=400&h=300&fit=crop'
            ]
        },
        {
            'title': 'Sac √† main cuir v√©ritable',
            'description': 'Sac √† main en cuir v√©ritable de qualit√©, marron, avec plusieurs compartiments. Parfait pour le travail. Marque de luxe, tr√®s peu utilis√©e.',
            'price': 45000,
            'category': 'Femmes',
            'images': [
                'https://images.unsplash.com/photo-1584917865442-de89df76afd3?w=400&h=300&fit=crop'
            ]
        },
        {
            'title': 'Smartphone Samsung Galaxy A52',
            'description': 'Smartphone Samsung Galaxy A52, 128GB, bleu, en tr√®s bon √©tat. Livr√© avec chargeur et coque de protection. √âcran parfait, batterie en bon √©tat.',
            'price': 120000,
            'category': '√âlectronique',
            'images': [
                'https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=400&h=300&fit=crop'
            ]
        },
        {
            'title': 'Livre "Le Petit Prince" en fran√ßais',
            'description': '√âdition collector du Petit Prince d\'Antoine de Saint-Exup√©ry, en parfait √©tat. Id√©al pour collectionneurs. Reliure en cuir, illustrations originales.',
            'price': 5000,
            'category': 'Livres',
            'images': [
                'https://images.unsplash.com/photo-1544947950-fa07a98d237f?w=400&h=300&fit=crop'
            ]
        },
        {
            'title': 'Ballon de football Adidas',
            'description': 'Ballon de football officiel Adidas, taille 5, utilis√© seulement quelques fois. Parfait pour l\'entra√Ænement. Couleur blanche et noir.',
            'price': 15000,
            'category': 'Sport',
            'images': [
                'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop'
            ]
        },
        {
            'title': 'Vase d√©coratif en c√©ramique',
            'description': 'Vase d√©coratif en c√©ramique artisanale, motif traditionnel africain. Parfait pour d√©corer votre salon. Hauteur 30cm, couleur terre cuite.',
            'price': 18000,
            'category': 'Maison',
            'images': [
                'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=300&fit=crop'
            ]
        },
        {
            'title': 'Jeu de soci√©t√© Monopoly',
            'description': 'Jeu de soci√©t√© Monopoly complet, toutes les pi√®ces pr√©sentes. Parfait pour les soir√©es en famille. Version fran√ßaise, bo√Æte en bon √©tat.',
            'price': 8000,
            'category': 'Loisirs',
            'images': [
                'https://images.unsplash.com/photo-1610890716171-6b1bb98ffd09?w=400&h=300&fit=crop'
            ]
        }
    ]
    
    created_count = 0
    for listing_data in demo_listings:
        try:
            # Trouver la cat√©gorie
            category = Category.objects.get(name=listing_data['category'])
            
            # Cr√©er l'annonce
            listing, created = Listing.objects.get_or_create(
                title=listing_data['title'],
                defaults={
                    'description': listing_data['description'],
                    'price': listing_data['price'],
                    'category': category,
                    'seller': user
                }
            )
            
            if created:
                print(f"‚úÖ Annonce cr√©√©e: {listing.title}")
                created_count += 1
            else:
                print(f"‚ÑπÔ∏è Annonce existante: {listing.title}")
            
            # Ajouter les images
            for i, image_url in enumerate(listing_data['images']):
                image_file = download_image(image_url, f"{listing.title}_{i}.jpg")
                if image_file:
                    photo = Photo.objects.create(
                        listing=listing,
                        image=image_file
                    )
                    print(f"   üì∏ Image {i+1} ajout√©e")
                else:
                    print(f"   ‚ùå √âchec de l'ajout de l'image {i+1}")
                
        except Category.DoesNotExist:
            print(f"‚ùå Cat√©gorie '{listing_data['category']}' non trouv√©e")
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation: {e}")
    
    # Statistiques finales
    print(f"\nüìä R√©sum√©:")
    print(f"   - {created_count} nouvelles annonces cr√©√©es")
    print(f"   - {Listing.objects.count()} annonces totales")
    print(f"   - {Photo.objects.count()} photos totales")
    
    # Lister toutes les annonces avec leurs photos
    print(f"\nüìã Toutes les annonces:")
    for listing in Listing.objects.all().order_by('-created_at'):
        photo_count = listing.photos.count()
        print(f"   - {listing.title} ({listing.category.name}) - {listing.price} FCFA - {photo_count} photo(s)")
    
    print(f"\nüéâ Annonces avec images cr√©√©es avec succ√®s!")
    print(f"üí° Vous pouvez maintenant voir ces annonces avec leurs images sur la page d'accueil")

if __name__ == '__main__':
    create_listings_with_images() 